     1                                  extern GetStdHandle
     2                                  extern WriteConsoleA
     3                                  extern ExitProcess
     4                                  extern MessageBoxA
     5                                  extern ReadConsoleA
     6                                  
     7                                  STD_INPUT_HANDLE equ -10
     8                                  STD_OUTPUT_HANDLE equ -11 
     9                                  NUM_OF_DIGITS equ 6
    10                                  NUM_OF_SYMBOLS equ (NUM_OF_DIGITS + 2) 
    11                                  
    12                                  section .code use32 ;write
    13                                  	
    14                                  ;-----------AtoI----------------------------------------------------;
    15                                  ;  entry:  esi - adress of string  									;
    16                                  ;  destr: eax, bl, (edx), esi										;
    17                                  ;  exit: eax - number												;
    18                                  ;-------------------------------------------------------------------;
    19                                  AtoI:		
    20 00000000 31C0                    first_symb:	xor eax, eax
    21 00000002 8A1E                    			mov bl, [esi]
    22 00000004 80FB39                  			cmp bl, '9'
    23 00000007 7F0B                    			jg type_check  ; short optimize?
    24 00000009 80EB30                  def:		sub bl, '0'			
    25 0000000C 0F8281000000            			jb end
    26 00000012 EB2A                    			jmp ffAtoD
    27                                  			
    28 00000014 80FB62                  type_check:	cmp bl, 'b'
    29 00000017 7429                    			je AtoB
    30 00000019 80FB6F                  			cmp bl, 'o'
    31 0000001C 7437                    			je AtoO
    32 0000001E 80FB68                  			cmp bl, 'h'
    33 00000021 7446                    			je AtoH
    34 00000023 80FB64                  			cmp bl, 'd'
    35 00000026 0F852A010000            			jne error
    36                                  			
    37 0000002C 46                      AtoD:		inc esi
    38 0000002D 8A1E                    			mov bl, [esi]
    39                                  		
    40 0000002F 80FB39                  			cmp bl, '9' ; optimize
    41 00000032 7F5F                    			jg end
    42 00000034 80EB30                  			sub bl, '0'
    43 00000037 725A                    			jb end 
    44                                  									;extra multiply
    45 00000039 8D0480                  			lea eax, [eax + eax*4] ; MUL 10   Самоизменяющийся код?
    46 0000003C 01C0                    			add eax, eax ;	
    47                                  		
    48 0000003E 00D8                    ffAtoD:		add al, bl
    49 00000040 EBEA                    			jmp AtoD
    50                                  							
    51 00000042 46                      AtoB:		inc esi
    52 00000043 8A1E                    			mov bl, [esi]
    53                                  
    54 00000045 80FB31                  			cmp bl, '1' ; optimize?
    55 00000048 7F49                    			jg end
    56 0000004A 80EB30                  			sub bl, '0'
    57 0000004D 7244                    			jb end   ; !optim suv -> cmp
    58                                  			
    59 0000004F 01C0                    			add eax, eax ; MUL 2
    60                                  			
    61 00000051 00D8                    			add al, bl  
    62 00000053 EBED                    			jmp AtoB
    63                                  
    64 00000055 46                      AtoO:		inc esi
    65 00000056 8A1E                    			mov bl, [esi]
    66                                  
    67 00000058 80FB37                  			cmp bl, '7' ; optimize?
    68 0000005B 7F36                    			jg end
    69 0000005D 80EB30                  			sub bl, '0'
    70 00000060 7231                    			jb end   ; !optim suv -> cmp
    71                                  			
    72 00000062 C1E003                  			shl eax, 3 ; MUL 8
    73                                  			
    74 00000065 00D8                    			add al, bl  
    75 00000067 EBEC                    			jmp AtoO
    76                                  			
    77 00000069 46                      AtoH:		inc esi
    78 0000006A 8A1E                    			mov bl, [esi]
    79                                  			
    80 0000006C 80EB30                  			sub bl, '0'
    81 0000006F 7222                    			jb end
    82 00000071 80FB09                  			cmp bl, 09h
    83 00000074 7616                    			jbe AtoH_next
    84 00000076 80EB07                  			sub bl, ('A' - '0') - 10d
    85 00000079 7218                    			jb end
    86 0000007B 80FB0F                  			cmp bl, 0fh
    87 0000007E 760C                    			jbe AtoH_next
    88 00000080 80EB20                  			sub bl, 'a' - 'A'
    89 00000083 720E                    			jb end
    90 00000085 80FB0F                  			cmp bl, 0fh
    91 00000088 7602                    			jbe short AtoH_next
    92 0000008A EB07                    			jmp end
    93                                  			
    94 0000008C C1E004                  AtoH_next: 	shl eax, 4 ; MUL 16
    95 0000008F 00D8                    			add al, bl
    96 00000091 EBD6                    			jmp AtoH			
    97                                  
    98 00000093 C3                      end:		ret
    99                                  			
   100                                  ;-----------ItoA--------------------------------------------------------;
   101                                  ;  entry: eax - number, edi - adress of string destination,				;
   102                                  ;ebx = adress of translation table, cx - base of numeral system( < 36h) ;
   103                                  ;  destr: eax, edi, edx													;
   104                                  ;  exit: [esi] - string of ascii codes, edi - pointer to begin of string;
   105                                  ;-----------------------------------------------------------------------;
   106                                  ItoA16sbit:		
   107 00000094 FD                      			std
   108                                  next16:		
   109 00000095 89C2                    			mov edx, eax
   110 00000097 C1EA10                  			shr edx, 10h
   111 0000009A 66F7F1                  			div cx ; dword
   112                                  			
   113 0000009D C1E010                  			shl eax, 10h ; xchg
   114 000000A0 88D0                    			mov al, dl
   115 000000A2 D7                      			xlat
   116 000000A3 AA                                  stosb
   117 000000A4 C1E810                  			shr eax, 10h
   118                                              
   119 000000A7 84C0                                test al, al; cmp al, 0
   120 000000A9 75EA                                jnz next16
   121 000000AB C3                      			ret
   122                                  ;------------------------------------------------------------------------;
   123                                  ; -||- ecx - base of numeral system( < 36h)
   124                                  ItoA32bit:		
   125 000000AC FD                      			std
   126                                  next32:		
   127 000000AD 31D2                    			xor edx, edx
   128 000000AF F7F1                    			div ecx ; word
   129 000000B1 92                      			xchg edx, eax
   130                                  			
   131 000000B2 D7                      			xlat
   132 000000B3 AA                                  stosb
   133 000000B4 89D0                    			mov eax, edx
   134                                              
   135 000000B6 84C0                                test al, al; cmp al, 0
   136 000000B8 75F3                                jnz next32
   137 000000BA C3                      			ret
   138                                  ;------------------------------------------------------------------------;
   139                                  
   140                                  ;-----------ItoAbinary---------------------------------------------------;
   141                                  ;  entry: eax - number, edi - adress of string destination,				 ;
   142                                  ;ebx = adress of translation table, edx - base of numeral system		 ;
   143                                  ;  destr: eax, edi, (edx)												 ;
   144                                  ;  exit: [esi] - ascii code of number									 ;
   145                                  ;------------------------------------------------------------------------;
   146                                  ;ItoAbinary:
   147                                  ;			std
   148                                  
   149                                  
   150                                  ;-----------Clear_mem@2---------------------------------------------------;
   151                                  ;  entry: 1. adress of end												  ;
   152                                  ;		  2. adress of begin											  ;
   153                                  ;  destr: 						    									  ;
   154                                  ;  exit: 									 							  ;
   155                                  ;-------------------------------------------------------------------------;
   156                                  Clear_mem@2:  	
   157 000000BB 55                      			push ebp
   158 000000BC 89E5                    			mov ebp, esp
   159                                  			
   160 000000BE 57                      			push edi
   161 000000BF 54                      			push esp
   162                                  			
   163 000000C0 FC                      			cld
   164 000000C1 8B4D08                  			mov ecx, [ebp + 8d]
   165 000000C4 8B7D0C                  			mov edi, [ebp + 12d]
   166 000000C7 29F9                    			sub ecx, edi
   167 000000C9 41                      			inc ecx
   168 000000CA B000                    			mov al, 00h
   169 000000CC F3AA                    			rep stosb
   170                                  			
   171 000000CE 5F                      			pop edi
   172 000000CF 5C                      			pop esp
   173                                  
   174 000000D0 5D                      			pop ebp
   175 000000D1 C3                      			ret			
   176                                  
   177                                  ;-----------EasyWrite@2---------------------------------------------------;
   178                                  ;  entry: 1. adress of begin												 		  ;
   179                                  ;		  2. adress of end											  ;
   180                                  ;  destr: 						    									  ;
   181                                  ;  exit: 									 							  ;
   182                                  ;-------------------------------------------------------------------------;
   183 000000D2 55                      EasyWrite:	push ebp
   184 000000D3 89E5                    			mov ebp, esp
   185                                  			
   186 000000D5 51                      			push ecx
   187 000000D6 50                      			push eax
   188                                  
   189                                  write:		push 						;mov dword [buffer_output], eax
   189          ******************       error: invalid combination of opcode and operands
   190 000000D7 6AF5                    			push STD_OUTPUT_HANDLE
   191 000000D9 FF15[00000000]          			call [GetStdHandle]
   192                                  			
   193 000000DF 31C9                    			xor ecx, ecx
   194 000000E1 51                      			push ecx
   195 000000E2 51                      			push ecx
   196                                  			
   197 000000E3 8B4D08                  			mov ecx, [ebp + 8] ; adress of end
   198 000000E6 2B4D0C                  			sub ecx, [ebp + 12] ; num of elements
   199 000000E9 41                      			inc ecx
   200                                  			
   201 000000EA 51                      			push ecx
   202                                  			push [ebp + 12]
   202          ******************       error: operation size not specified
   203 000000EB 50                      			push eax
   204 000000EC FF15[00000000]          			call [WriteConsoleA]
   205                                  			
   206 000000F2 59                      			pop ecx
   207 000000F3 58                      			pop eax
   208                                  			
   209 000000F4 5D                      			pop ebp
   210 000000F5 C3                      			ret
   211                                  Printb:
   212                                  			
   213                                  			
   214                                  			
   215                                  start:						
   216 000000F6 6AF6                    read: 		push STD_INPUT_HANDLE 
   217 000000F8 FF15[00000000]          			call [GetStdHandle]
   218                                  			
   219 000000FE 31D2                    			xor edx, edx
   220 00000100 52                      			push edx
   221 00000101 68[2A000000]            			push numOfread
   222 00000106 6A08                    			push NUM_OF_SYMBOLS
   223 00000108 68[21000000]            			push buffer_input
   224 0000010D 50                      			push eax
   225 0000010E FF15[00000000]          			call [ReadConsoleA]
   226                                  			
   227 00000114 BE[21000000]            			mov esi, buffer_input
   228 00000119 E8E2FEFFFF              			call AtoI
   229                                  			
   230 0000011E BF[1F000000]            			mov edi, buffer_output_end
   231 00000123 BB[00000000]            			mov ebx, HexStr
   232 00000128 B910000000              			mov ecx, 00000010h
   233 0000012D E87AFFFFFF              			call ItoA32bit
   234                                  			
   235 00000132 47                      			inc edi ; edi - adress of string's begin
   236 00000133 57                      			push edi
   237 00000134 68[1F000000]            			push buffer_output_end
   238 00000139 E87DFFFFFF              			call Clear_mem@2
   239                                  
   240                                  			
   241 0000013E E8B3FFFFFF              			call Printb
   242                                  			call Printh
   242          ******************       error: symbol `Printh' undefined
   243                                  			call Printo
   243          ******************       error: symbol `Printo' undefined
   244                                  			
   245 00000143 31C0                    exit:		xor eax, eax
   246 00000145 50                      			push eax
   247 00000146 FF15[00000000]          			call[ExitProcess]
   248                                  			
   249                                  error:		
   250                                  message:
   251 0000014C 31C0                    			xor eax, eax
   252 0000014E 50                       			push eax
   253 0000014F 50                      			push eax
   254 00000150 68[25000000]            			push dword Msg
   255 00000155 50                      			push eax
   256 00000156 FF15[00000000]          			call [MessageBoxA]
   257 0000015C EBE5                    			jmp exit			
   258                                  			
   259                                  section .bss use32
   260 00000000 <res 00000021>          			buffer_output resb (4*NUM_OF_SYMBOLS+1)
   261                                  			buffer_output_end equ $ - 2
   262 00000021 <res 00000009>          			buffer_input resb (NUM_OF_SYMBOLS + 1)
   263 0000002A <res 00000001>          			numOfread resb 1
   264                                  			
   265                                  section .data use32
   266 00000000 303132333435363738-     			HexStr db '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', 0
   266 00000009 394142434445464748-
   266 00000012 494A4B4C4D4E4F5051-
   266 0000001B 52535455565758595A-
   266 00000024 00                 
   267 00000025 57726F6E6720747970-     			Msg db "Wrong type", 0dh, 0ah, 0
   267 0000002E 650D0A00           
   268                                  			Msg.len equ $ - Msg

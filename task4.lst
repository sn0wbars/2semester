     1                                  extern GetStdHandle
     2                                  extern WriteConsoleA
     3                                  extern ExitProcess
     4                                  extern MessageBoxA
     5                                  extern ReadConsoleA
     6                                  
     7                                  STD_INPUT_HANDLE equ -10
     8                                  STD_OUTPUT_HANDLE equ -11 
     9                                  NUM_OF_DIGITS equ 6
    10                                  NUM_OF_SYMBOLS equ (NUM_OF_DIGITS + 2) 
    11                                  
    12                                  section .code use32 ;write
    13                                  	
    14                                  ;-----------AtoI----------------------------------------------------;
    15                                  ;  entry:  esi - adress of string  									;
    16                                  ;  destr: eax, bl, (edx), esi										;
    17                                  ;  exit: eax - number												;
    18                                  ;-------------------------------------------------------------------;
    19                                  AtoI:		
    20 00000000 31C0                    first_symb:	xor eax, eax
    21 00000002 8A1E                    			mov bl, [esi]
    22 00000004 80FB39                  			cmp bl, '9'
    23 00000007 7F0B                    			jg type_check  ; short optimize?
    24 00000009 80EB30                  def:		sub bl, '0'			
    25 0000000C 0F8281000000            			jb end
    26 00000012 EB2A                    			jmp ffAtoD
    27                                  			
    28 00000014 80FB62                  type_check:	cmp bl, 'b'
    29 00000017 7429                    			je AtoB
    30 00000019 80FB6F                  			cmp bl, 'o'
    31 0000001C 7437                    			je AtoO
    32 0000001E 80FB68                  			cmp bl, 'h'
    33 00000021 7446                    			je AtoH
    34 00000023 80FB64                  			cmp bl, 'd'
    35 00000026 0F8508010000            			jne error
    36                                  			
    37 0000002C 46                      AtoD:		inc esi
    38 0000002D 8A1E                    			mov bl, [esi]
    39                                  		
    40 0000002F 80FB39                  			cmp bl, '9' ; optimize
    41 00000032 7F5F                    			jg end
    42 00000034 80EB30                  			sub bl, '0'
    43 00000037 725A                    			jb end 
    44                                  									;extra multiply
    45 00000039 8D0480                  			lea eax, [eax + eax*4] ; MUL 10   Самоизменяющийся код?
    46 0000003C 01C0                    			add eax, eax ;	
    47                                  		
    48 0000003E 00D8                    ffAtoD:		add al, bl
    49 00000040 EBEA                    			jmp AtoD
    50                                  							
    51 00000042 46                      AtoB:		inc esi
    52 00000043 8A1E                    			mov bl, [esi]
    53                                  
    54 00000045 80FB31                  			cmp bl, '1' ; optimize?
    55 00000048 7F49                    			jg end
    56 0000004A 80EB30                  			sub bl, '0'
    57 0000004D 7244                    			jb end   ; !optim suv -> cmp
    58                                  			
    59 0000004F 01C0                    			add eax, eax ; MUL 2
    60                                  			
    61 00000051 00D8                    			add al, bl  
    62 00000053 EBED                    			jmp AtoB
    63                                  
    64 00000055 46                      AtoO:		inc esi
    65 00000056 8A1E                    			mov bl, [esi]
    66                                  
    67 00000058 80FB37                  			cmp bl, '7' ; optimize?
    68 0000005B 7F36                    			jg end
    69 0000005D 80EB30                  			sub bl, '0'
    70 00000060 7231                    			jb end   ; !optim suv -> cmp
    71                                  			
    72 00000062 C1E003                  			shl eax, 3 ; MUL 8
    73                                  			
    74 00000065 00D8                    			add al, bl  
    75 00000067 EBEC                    			jmp AtoO
    76                                  			
    77 00000069 46                      AtoH:		inc esi
    78 0000006A 8A1E                    			mov bl, [esi]
    79                                  			
    80 0000006C 80EB30                  			sub bl, '0'
    81 0000006F 7222                    			jb end
    82 00000071 80FB09                  			cmp bl, 09h
    83 00000074 7616                    			jbe AtoH_next
    84 00000076 80EB07                  			sub bl, ('A' - '0') - 10d
    85 00000079 7218                    			jb end
    86 0000007B 80FB0F                  			cmp bl, 0fh
    87 0000007E 760C                    			jbe AtoH_next
    88 00000080 80EB20                  			sub bl, 'a' - 'A'
    89 00000083 720E                    			jb end
    90 00000085 80FB0F                  			cmp bl, 0fh
    91 00000088 7602                    			jbe short AtoH_next
    92 0000008A EB07                    			jmp end
    93                                  			
    94 0000008C C1E004                  AtoH_next: 	shl eax, 4 ; MUL 16
    95 0000008F 00D8                    			add al, bl
    96 00000091 EBD6                    			jmp AtoH			
    97                                  
    98 00000093 C3                      end:		ret
    99                                  			
   100                                  ;-----------ItoA--------------------------------------------------------;
   101                                  ;  entry: eax - number, edi - adress of string destination,				;
   102                                  ;ebx = adress of translation table, cx - base of numeral system( < 36h) ;
   103                                  ;  destr: eax, edi, edx													;
   104                                  ;  exit: [esi] - string of ascii codes, edi - pointer to begin of string;
   105                                  ;-----------------------------------------------------------------------;
   106                                  ItoA16sbit:		
   107 00000094 FD                      			std
   108                                  next16:		
   109 00000095 89C2                    			mov edx, eax
   110 00000097 C1EA10                  			shr edx, 10h
   111 0000009A 66F7F1                  			div cx ; dword
   112                                  			
   113 0000009D C1E010                  			shl eax, 10h ; xchg
   114 000000A0 88D0                    			mov al, dl
   115 000000A2 D7                      			xlat
   116 000000A3 AA                                  stosb
   117 000000A4 C1E810                  			shr eax, 10h
   118                                              
   119 000000A7 84C0                                test al, al; cmp al, 0
   120 000000A9 75EA                                jnz next16
   121 000000AB C3                      			ret
   122                                  ;------------------------------------------------------------------------;
   123                                  ; -||- ecx - base of numeral system( < 36h)
   124                                  ItoA32bit:		
   125 000000AC FD                      			std
   126                                  next32:		
   127 000000AD 31D2                    			xor edx, edx
   128 000000AF F7F1                    			div ecx ; word
   129 000000B1 92                      			xchg edx, eax
   130                                  			
   131 000000B2 D7                      			xlat
   132 000000B3 AA                                  stosb
   133 000000B4 89D0                    			mov eax, edx
   134                                              
   135 000000B6 84C0                                test al, al; cmp al, 0
   136 000000B8 75F3                                jnz next32
   137 000000BA C3                      			ret
   138                                  ;------------------------------------------------------------------------;
   139                                  
   140                                  ;-----------ItoAbinary---------------------------------------------------;
   141                                  ;  entry: eax - number, edi - adress of string destination,				 ;
   142                                  ;ebx = adress of translation table, edx - base of numeral system		 ;
   143                                  ;  destr: eax, edi, (edx)												 ;
   144                                  ;  exit: [esi] - ascii code of number									 ;
   145                                  ;------------------------------------------------------------------------;
   146                                  ;ItoAbinary:
   147                                  ;			std
   148                                  
   149                                  
   150                                  ;-----------Clear_mem@2---------------------------------------------------;
   151                                  ;  entry: 1. adress of end												  ;
   152                                  ;		  2. adress of begin											  ;
   153                                  ;  destr: 						    									  ;
   154                                  ;  exit: 									 							  ;
   155                                  ;-------------------------------------------------------------------------;
   156                                  Clear_mem@2:  	
   157 000000BB 55                      			push ebp
   158 000000BC 89E5                    			mov ebp, esp
   159                                  			
   160 000000BE 57                      			push edi
   161 000000BF 54                      			push esp
   162                                  			
   163 000000C0 FC                      			cld
   164 000000C1 8B4D08                  			mov ecx, [ebp + 8d]
   165 000000C4 8B7D0C                  			mov edi, [ebp + 12d]
   166 000000C7 29F9                    			sub ecx, edi
   167 000000C9 41                      			inc ecx
   168 000000CA B000                    			mov al, 00h
   169 000000CC F3AA                    			rep stosb
   170                                  			
   171 000000CE 5F                      			pop edi
   172 000000CF 5C                      			pop esp
   173                                  
   174 000000D0 5D                      			pop ebp
   175 000000D1 C3                      			ret			
   176                                  
   177                                  start:						
   178 000000D2 6AF6                    read: 		push STD_INPUT_HANDLE 
   179 000000D4 FF15[00000000]          			call [GetStdHandle]
   180                                  			
   181 000000DA 31D2                    			xor edx, edx
   182 000000DC 52                      			push edx
   183 000000DD 68[2A000000]            			push numOfread
   184 000000E2 6A08                    			push NUM_OF_SYMBOLS
   185 000000E4 68[21000000]            			push buffer_input
   186 000000E9 50                      			push eax
   187 000000EA FF15[00000000]          			call [ReadConsoleA]
   188                                  			
   189 000000F0 BE[21000000]            			mov esi, buffer_input
   190 000000F5 E806FFFFFF              			call AtoI
   191                                  			
   192 000000FA BF[1F000000]            			mov edi, buffer_output_end
   193 000000FF BB[00000000]            			mov ebx, HexStr
   194 00000104 B910000000              			mov ecx, 00000010h
   195 00000109 E89EFFFFFF              			call ItoA32bit
   196                                  			
   197                                  			;inc edi ; edi - adress of string's begin
   198                                  			;push edi
   199                                  			;push buffer_output_end
   200                                  			;call Clear_mem@2
   201                                  
   202                                  write:		;mov dword [buffer_output], eax
   203                                  
   204 0000010E 6AF5                    			push STD_OUTPUT_HANDLE
   205 00000110 FF15[00000000]          			call [GetStdHandle]
   206                                  			
   207 00000116 31D2                    			xor edx, edx
   208 00000118 52                      			push edx
   209 00000119 52                      			push edx
   210 0000011A B9[1F000000]            			mov ecx, buffer_output_end
   211 0000011F 29F9                    			sub ecx, edi ; edi - begin of output_string
   212 00000121 51                      			push ecx
   213 00000122 47                      			inc edi 
   214 00000123 57                      			push edi
   215 00000124 50                      			push eax
   216 00000125 FF15[00000000]          			call [WriteConsoleA]
   217                                  			
   218 0000012B 31C0                    exit:		xor eax, eax
   219 0000012D 50                      			push eax
   220 0000012E FF15[00000000]          			call[ExitProcess]
   221                                  			
   222                                  error:		
   223                                  message:
   224 00000134 31C0                    			xor eax, eax
   225 00000136 50                       			push eax
   226 00000137 50                      			push eax
   227 00000138 68[25000000]            			push dword Msg
   228 0000013D 50                      			push eax
   229 0000013E FF15[00000000]          			call [MessageBoxA]
   230 00000144 EBE5                    			jmp exit			
   231                                  			
   232                                  section .bss use32
   233 00000000 <res 00000021>          			buffer_output resb (4*NUM_OF_SYMBOLS+1)
   234                                  			buffer_output_end equ $ - 2
   235 00000021 <res 00000009>          			buffer_input resb (NUM_OF_SYMBOLS + 1)
   236 0000002A <res 00000001>          			numOfread resb 1
   237                                  			
   238                                  section .data use32
   239 00000000 303132333435363738-     			HexStr db '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', 0
   239 00000009 394142434445464748-
   239 00000012 494A4B4C4D4E4F5051-
   239 0000001B 52535455565758595A-
   239 00000024 00                 
   240 00000025 57726F6E6720747970-     			Msg db "Wrong type", 0dh, 0ah, 0
   240 0000002E 650D0A00           
   241                                  			Msg.len equ $ - Msg

     1                                  extern GetStdHandle
     2                                  extern WriteConsoleA
     3                                  extern ExitProcess
     4                                  extern MessageBoxA
     5                                  extern ReadConsoleA
     6                                  
     7                                  STD_INPUT_HANDLE equ -10
     8                                  STD_OUTPUT_HANDLE equ -11 
     9                                  NUM_OF_DIGITS equ 6
    10                                  NUM_OF_SYMBOLS equ (NUM_OF_DIGITS + 2) 
    11                                  
    12                                  section .code use32 ;write
    13                                  
    14                                  ;-----------ItoA-----------------------------------------------------------;
    15                                  ;  entry: eax - number, edi - adress of string destination,				   ;
    16                                  ;   ebx = adress of translation table, ecx - base of numeral system( < 36h) ;
    17                                  ;  destr: eax, edi, edx													   ;
    18                                  ;  exit: [esi] - string of ascii codes, edi - pointer to begin of string   ;
    19                                  ;--------------------------------------------------------------------------;
    20                                  ItoA32:		
    21 00000000 FD                      			std
    22                                  next32:		
    23 00000001 31D2                    			xor edx, edx
    24 00000003 F7F1                    			div ecx ; word
    25 00000005 92                      			xchg edx, eax
    26                                  			
    27 00000006 D7                      			xlat
    28 00000007 AA                                  stosb
    29 00000008 89D0                    			mov eax, edx
    30                                              
    31 0000000A 84C0                                test al, al; cmp al, 0
    32 0000000C 75F3                                jnz next32
    33 0000000E C3                      			ret
    34                                  			
    35                                  ;-----------EasyWrite@2---------------------------------------------------;
    36                                  ;  entry: 1. num of printing symbols											  ;
    37                                  ;		  2. adress of begin								      ;
    38                                  ;  destr: 						    									  ;
    39                                  ;  exit: 									 							  ;
    40                                  ;-------------------------------------------------------------------------;
    41 0000000F 55                      EasyWrite:			push ebp
    42 00000010 89E5                    					mov ebp, esp
    43                                  					
    44 00000012 51                      					push ecx
    45 00000013 50                      					push eax
    46                                  
    47                                  write:		;mov dword [buffer_output], eax
    48 00000014 6AF5                    					push STD_OUTPUT_HANDLE
    49 00000016 FF15[00000000]          					call [GetStdHandle]
    50                                  					
    51 0000001C 31C9                    					xor ecx, ecx
    52 0000001E 51                      					push ecx
    53 0000001F 51                      					push ecx
    54                                  					
    55 00000020 FF7508                  					push dword [ebp + 8] ; num of symbols		
    56 00000023 FF750C                  					push dword [ebp + 12]
    57                                  					
    58 00000026 50                      					push eax
    59 00000027 FF15[00000000]          					call [WriteConsoleA]
    60                                  					
    61 0000002D 59                      					pop ecx
    62 0000002E 58                      					pop eax
    63                                  					
    64 0000002F 89EC                    					mov esp, ebp
    65 00000031 5D                      					pop ebp
    66 00000032 C3                      					ret
    67                                  
    68                                  ;-----------printf----------------------------------------------------;
    69                                  ;  entry:  edi - adress of string; Any number of parametres in stack 
    70                                  ;								  ;
    71                                  ;  destr: eax, bl, (edx), esi										  ;
    72                                  ;  exit: eax - number												  ;
    73                                  ;---------------------------------------------------------------------;
    74 00000033 55                      printf:				push ebp
    75 00000034 89E5                    					mov ebp, esp
    76                                  					;STR_LENw0 equ [ebp - 4]
    77 00000036 83EC08                  					sub esp, 8;optim
    78                                  					
    79 00000039 89FE                    					 mov esi, edi; esi - pointer to begin of string
    80 0000003B B9FFFFFFFF              					 mov ecx, -1
    81 00000040 FC                      					 cld
    82 00000041 B000                    					 mov al, 0
    83 00000043 F2AE                    					 repne scasb
    84                                  					 ;cmp edi,0  jmp error 
    85 00000045 F7D1                    					 not ecx; lenght of string
    86 00000047 49                      					 dec ecx; without '0'
    87 00000048 894DFC                  					 mov [ebp - 4], ecx; save it for later
    88 0000004B 4F                      					 dec edi; edi - pointer to last "real" symblol
    89                                  					 
    90 0000004C FD                      					 std
    91 0000004D B025                    					 mov al, '%'
    92 0000004F F2AE                    					 repne scasb ; check is there any '%' 
    93 00000051 7566                    					 jne WriteText ; if not use simple print
    94                                  					 
    95 00000053 8B4DFC                  					 mov ecx, [ebp - 4]
    96                                  					 
    97 00000056 FC                      					 cld
    98 00000057 BA01000000              					 mov edx, 1;edx - num of blocks
    99 0000005C 89F7                    					 mov edi, esi
   100 0000005E 89CB                    					 mov ebx, ecx
   101 00000060 F2AE                    					 repne scasb 
   102                                  BuildMAP:			 ;;;;;;;;;;;;;;;;
   103 00000062 29CB                    					 sub ebx, ecx; num of symbols in block
   104 00000064 4B                      					 dec ebx
   105 00000065 53                      					 push ebx
   106                                  					 ;inc edi; to get letter after '%'
   107                                  					 
   108                                  					 ;xor ebx, ebx
   109                                  					 ;mov bl, [edi]; !
   110                                  					 ;push ebx; optim
   111 00000066 47                      					 inc edi; to skip format letter
   112 00000067 49                      					 dec ecx; to skip format letter
   113                                  					 
   114 00000068 89CB                    					 mov ebx, ecx
   115 0000006A F2AE                    					 repne scasb 
   116                                  					 
   117 0000006C 42                      					 inc edx; edx - num of blocks
   118 0000006D 85C9                    					 test ecx, ecx
   119 0000006F 75F1                    					 jne BuildMAP
   120                                  					 
   121 00000071 29CB                    					 sub ebx, ecx; num of symbols in block
   122 00000073 53                      					 push ebx
   123                                  					 
   124 00000074 FD                      					 std
   125                                  					 ;push 0
   126 00000075 31C0                    					 xor eax, eax; ah - symbol
   127 00000077 0375FC                  					 add esi, [ebp - 4]; esi - end of string
   128 0000007A 4E                      					 dec esi; one extra
   129 0000007B 89E7                    					 mov edi, esp 
   130 0000007D 83EF0C                  					 sub edi, 12; edi - end of output
   131 00000080 897DF8                  					 mov [ebp - 8], edi
   132 00000083 8D5D08                  					 lea ebx, [ebp + 8];ebx - contains parametres
   133 00000086 59                      CreatOutputString:	 pop ecx
   134 00000087 F3A4                    					 rep movsb 
   135                                  					 
   136 00000089 8A06                    					 mov al, [esi]
   137 0000008B 3C64                    					 cmp al, 'd'
   138 0000008D 7437                    					 je ItoD
   139                                  					 
   140 0000008F 3C6F                    					 cmp al, 'o'
   141 00000091 744A                    					 je ItoO
   142                                  					 
   143 00000093 3C62                    					 cmp al, 'b'
   144 00000095 742D                    					 je ItoB
   145                                  					 
   146 00000097 3C63                    					 cmp al, 'c'
   147 00000099 7442                    					 je ItoC
   148                                  					 
   149 0000009B 3C73                    					 cmp al, 's'
   150 0000009D 743E                    					 je ItoS
   151                                  					 
   152 0000009F 83C304                  SwitchEnd:			 add ebx, 4; next parameter
   153 000000A2 4E                      					 dec esi
   154 000000A3 4E                      					 dec esi
   155                                  					 
   156 000000A4 4A                      					 dec edx
   157 000000A5 75DF                    					 jnz CreatOutputString
   158                                  					 
   159 000000A7 47                      					 inc edi; one extra 
   160 000000A8 8B75F8                  					 mov esi, [ebp - 8]
   161 000000AB 29FE                    					 sub esi, edi
   162 000000AD 46                      					 inc esi
   163 000000AE 89FC                    					 mov esp, edi
   164                                  					 
   165                                  WriteF:		        
   166 000000B0 54                      					 push esp
   167 000000B1 56                      					 push esi
   168 000000B2 E858FFFFFF              					 call EasyWrite
   169 000000B7 C9                      					 leave
   170 000000B8 C3                      					 ret
   171                                  WriteText: 			 
   172 000000B9 56                      					 push esi
   173 000000BA FF75FC                  					 push dword [ebp - 4]
   174 000000BD E84DFFFFFF              					 call EasyWrite
   175 000000C2 C9                      					 leave 
   176 000000C3 C3                      					 ret
   177                                  					 
   178                                  ItoB:
   179 000000C4 8B03                    					 mov eax, [ebx]
   180                                  					 
   181                                  ItoD:				 
   182 000000C6 8B03                    					 mov eax, [ebx]
   183 000000C8 52                      					 push edx
   184 000000C9 53                      					 push ebx
   185                                  					 
   186 000000CA B90A000000              					 mov ecx, 10d
   187 000000CF BB[00000000]            					 mov ebx, HexStr
   188 000000D4 E827FFFFFF              					 call ItoA32
   189                                  					 
   190 000000D9 5B                      					 pop ebx
   191 000000DA 5A                      					 pop edx
   192 000000DB EBC2                    					 jmp SwitchEnd
   193                                  					 
   194                                  ItoC:
   195                                  					 
   196                                  ItoS:
   197                                  ItoO:				 
   198 000000DD 3C0A                    					 cmp al, 10
   199 000000DF 1C96                    					 sbb al, 96h
   200 000000E1 2F                      					 das
   201 000000E2 EBBB                    					 jmp SwitchEnd
   202                                  					
   203                                  start:
   204 000000E4 68D2040000              					 push 1234d
   205 000000E9 68D2040000              					 push 1234d
   206 000000EE 68D2040000              					 push 1234d
   207 000000F3 68D2040000              					 push 1234d
   208 000000F8 68D2040000              					 push 1234d
   209 000000FD 6A00                    					 push 0
   210 000000FF 6A63                    					 push 99d
   211 00000101 6800010000              					 push 100h
   212 00000106 68D2040000              					 push 1234d
   213 0000010B BF[25000000]            					 mov edi, String
   214 00000110 E81EFFFFFF              					 call printf
   215 00000115 FC                      					 cld
   216                                  					
   217 00000116 6A00                    exit:				 push 0
   218 00000118 FF15[00000000]          					 call[ExitProcess]
   219                                  					
   220                                  section .data use32
   221 00000000 303132333435363738-     					HexStr db '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', 0
   221 00000009 394142434445464748-
   221 00000012 494A4B4C4D4E4F5051-
   221 0000001B 52535455565758595A-
   221 00000024 00                 
   222 00000025 6F6F256F6F256F6F25-     					String db 'oo%oo%oo%doo%o%doo%doo%ooo%dooo', 0
   222 0000002E 646F6F256F25646F6F-
   222 00000037 25646F6F256F6F6F25-
   222 00000040 646F6F6F00         
